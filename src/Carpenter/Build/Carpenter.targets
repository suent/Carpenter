<!--
    Carpenter
    A cross-platform dotnet (.NET) build process helper.

    Copyright © 2015-2022 Suent Networks, All rights reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
-->
<!-- SPDX-License-Identifier: MIT -->
<Project>
  <!-- Should we determine developer version number -->
  <Target Name="CarpenterEvaluateVersion" BeforeTargets="GenerateTargetFrameworkMonikerAttribute">
    <PropertyGroup Condition=" '$(VersionSuffix)' == 'dev'">
      <CarpenterEvaluateVersion>true</CarpenterEvaluateVersion>
    </PropertyGroup>      
  </Target>
  
  <!-- VERSION file contains version information -->
  <Target Name="CarpenterDetermineVersionFile"
          AfterTargets="CarpenterEvaluateVersion"
          Condition=" '$(CarpenterEvaluateVersion)' == 'true' ">
    <!-- If CarpenterVersionFile has not been defined, look in project and solution directories -->
    <PropertyGroup Condition=" '$(CarpenterVersionFile)' == '' ">
      <CarpenterVersionFile 
        Condition=" Exists('$(SolutionDir)\VERSION') "
        >$(SolutionDir)\VERSION</CarpenterVersionFile>
      <CarpenterVersionFile 
        Condition=" Exists('$(MSBuildProjectDirectory)\VERSION') "
        >$(MSBuildProjectDirectory)\VERSION</CarpenterVersionFile>
    </PropertyGroup>
    <!-- If CarpenterVersionFile still has not been defined, display build warning -->
    <Warning 
      Condition=" '$(CarpenterVersionFile)' == '' " 
      Text="Could not determine VERSION file. Carpenter did not locate a VERSION file in the project or solution directories. If the file exists outside of these directories, define a custom path using the CarpenterVersionFile property." />
  </Target>
  
  <Target Name="CarpenterEvaluateVersionFile"
          AfterTargets="CarpenterDetermineVersionFile"
          Condition=" '$(CarpenterVersionFile)' != '' ">
    <PropertyGroup>
      <!-- The full path to the VERSION file -->
      <CarpenterVersionFullVersionPath
        >$([System.IO.Path]::GetFullPath('$(CarpenterVersionFile)'))</CarpenterVersionFullVersionPath>
    </PropertyGroup>
    <Error Condition="!Exists($(CarpenterVersionFullVersionPath))"
           Text="Could not locate VERSION file. File not found: $(CarpenterVersionFullVersionPath)"/>
    <Message Text="Using file: $(CarpenterVersionFullVersionPath)" />    
    <!-- Read the VERSION File -->
    <ReadLinesFromFile File="$(CarpenterVersionFullVersionPath)">
      <Output TaskParameter="Lines" PropertyName="CarpenterVersionFromFile" />
    </ReadLinesFromFile>
    <!-- Validate version using Regex -->
    <Error 
      Condition=" !$([System.Text.RegularExpressions.Regex]::IsMatch('$(CarpenterVersionFromFile)',
      '^(\d+)\.(\d+)\.(\d+)$')) "
      Text="VERSION file should contain only the Major.Minor.Patch elements of the version number (e.g. 1.2.3). Version File: $(CarpenterVersionFullVersionPath)" />
    <!-- Populate version properties -->
    <PropertyGroup>
      <VersionPrefix>$(CarpenterVersionFromFile)</VersionPrefix>
      <VersionSuffix>dev.$([System.DateTime]::UtcNow.ToString(yyyyMMdd-HHmmss-fff))</VersionSuffix>
      <VersionMetadata Condition=" '$(COMPUTERNAME)' != '' OR '$(USERNAME)' != ''">+</VersionMetadata>
      <VersionMetadata Condition=" '$(COMPUTERNAME)' != ''">$(VersionMetaData)$(COMPUTERNAME)</VersionMetadata>
      <VersionMetadata
        Condition=" '$(COMPUTERNAME)' != '' AND '$(USERNAME)' != ''">$(VersionMetaData).</VersionMetadata>
      <VersionMetadata Condition=" '$(USERNAME)' != ''">$(VersionMetaData)$(USERNAME)</VersionMetadata>
      <PackageVersion Condition="'$(VersionSuffix)' == ''">$(VersionPrefix)</PackageVersion>
      <PackageVersion Condition="'$(VersionSuffix)' != ''">$(VersionPrefix)-$(VersionSuffix)</PackageVersion>
      <Version>$(PackageVersion)$(VersionMetadata)</Version>
      <CarpenterVersionFullVersionString>$(Version)</CarpenterVersionFullVersionString>
    </PropertyGroup>
    <!-- Write version to build output -->
    <Message Text="Version: $(CarpenterVersionFullVersionString)" />
  </Target>

</Project>
